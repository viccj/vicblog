<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Union Find on Log of Vic</title>
    <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind.html</link>
    <description>Recent content in Union Find on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Connectivity</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/DynamicConnectivity.html</link>
      <pubDate>Sat, 24 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/DynamicConnectivity.html</guid>
      <description>前提 目的 相關應用 連接的定義 演算法實作 Union-find data type (API) 目標：為了union-find 設計一個有效率的資料結構 Union-find implementation[2] 參考來源 前提 Giving N objects
目的 寫出演算法來完成以下兩點
Union command: connect two objects Find/connected query: Is there a path connecting the two objects? 假設給定的物件為 0,1,2,3,4,5,6,7,8,9，在執行完以下的union命令後，
Union(4, 3) Union(3, 8) Union(6, 5) Union(9, 4) Union(2, 1) connected(0, 7) // no connected connected(8, 9) // connected union(5, 0) union(7, 2) connected(0, 7) union(1, 0) // connected connectivity 的狀況會如下圖
相關應用 數位照片的Pixels 在同一個網路的電腦 社群網站的好友 連接的定義 Reflexive: p 跟 p 自己連接 Symmetric: 若p跟q連接，q也跟p連接 Transitive: 若p跟q連接，q跟r連接，則p跟r連接 物件如果連接可以想成他們是在同一個component裏面，因此就剛剛的例子，會有2個component set</description>
    </item>
    
    <item>
      <title>Quick Find</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickFind.html</link>
      <pubDate>Mon, 26 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickFind.html</guid>
      <description>Quick Find Structure 初始資料結構 Find Connected. Union. Implemetion Too slow Cost model Quick-find defect: Union too expensive 參考來源 Quick Find Structure 初始資料結構 名為 id[] 且數量為 N 的陣列
id[p] 是物件 p 所屬於的 component id
以上圖為例，id[6] = 0
Find p 的 id 為？
Connected. p 跟 q 是否有相同的 id？
ex: id[6] = 0, id[7] =1, 6 跟7 並沒有connect
Union. 要將包含 p 跟 q 的兩個components 合併，找出所有id 為 id[p] 的物件， 將其 id 修改成 id[q].</description>
    </item>
    
    <item>
      <title>Quick Union</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickUnion.html</link>
      <pubDate>Fri, 30 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickUnion.html</guid>
      <description>初始資料結構 Root Find Union Implement Also too slow Cost model Quick-find defect Quick-union defect 參考來源 因為 Quick-find 演算法中，Union 的效率太低，因此要改善Union，在這章節稱為Quick Union （lazy approach），為什麼要叫Lazy approach呢？因為能躺著就不要做著，能坐著就不要站著，除非死到臨頭不然不要行動。
初始資料結構 名為 id[] 且數量為 N 的陣列
id[p] 是物件 p 所屬於的component id
上面兩個與 Quick-find 一樣，但這次多了一個新的結構， root
Root 將一整個Array 看成 a set of trees，也就是說每個物件都屬於一個 tree，這個資料結構就是由很多 tree 集合而成。
每個物件，會有一個Parent，如下圖，（3 可以接到4，3的 parent 是 4，4 的 parent 是 9) 順著線一直找，當找不到 parent 時，這時候就稱這點為 root
如果這個物件只有自己，那自己就是root，例如1
Find 因為每個物件都會有一個 root，要找兩個物件是不是同一個 component 的話，只要看他們的 root 是不是一樣就可以</description>
    </item>
    
    <item>
      <title>Weighted Quick Union</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/WeithgedQuickUnion.html</link>
      <pubDate>Sat, 29 Jul 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/WeithgedQuickUnion.html</guid>
      <description>Imporvement 1: weighting Data Structure Find Union Implement Weighted quick-union analysis Running time. Proposition Can we impove it even further? 參考來源 How to imporvements Quick-union?
上一篇中， Quick-Union 演算法中，最後可能因為每個tree長得太高，導致效率變差。
Imporvement 1: weighting 在每次 Union 時，順帶記錄每棵樹的 size (number of objects)
在每次 Union 時，刻意將較小的樹連接到較大的樹下
Data Structure 與 quick-union 一樣，但多追蹤每棵樹的大小 (size of objects for roots)
Find 與 quick-union 一樣
Union 修改為：
將小的樹往大的樹接 更新 sz[] array Implement public class QuickUnionUF { private int[] id; private int[] sz; // size of objects for roots (site indexed) // set id of each object to itself (N array access) public WeightedQuickFindUF(int N) { id = new int[N]; for (int i = 0; i &amp;lt; N; i++) { id[i] = i; } // init sz of every objects sz = new int[N]; for (int i = 0; i &amp;lt; N; i++) { sz[i] = 1; } } public int root(int i) { while (i !</description>
    </item>
    
  </channel>
</rss>
