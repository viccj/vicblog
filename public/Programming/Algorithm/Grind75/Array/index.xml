<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Array on Log of Vic</title>
    <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array.html</link>
    <description>Recent content in Array on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://lazyvic.com/Programming/Algorithm/Grind75/Array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Two Sum</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/TwoSum.html</link>
      <pubDate>Thu, 03 Aug 2023 13:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/TwoSum.html</guid>
      <description>Two Sum 暴力解 兩個 loop 加起來等於 target, 就回傳他們的 index，應該是最新手最直覺的人（我）都想得出來的解答
優化解 一樣是用兩個 loop 去解，但是這裡不是用 nested loop，而是先用一個 loop 以及 hashmap 把陣列裡的每個值標記起來 [index, value]，另一個 loop 再去對每個值做計算，如果 target - nums[i] 有在 hashmap裏面，就回傳 i 以及對應的 index
class Solution { public int[] twoSum(int[] nums, int target) { Map&amp;lt;Integer, Integer&amp;gt; hashmap = new HashMap&amp;lt;&amp;gt;(); for(int i = 0; i &amp;lt; nums.length; i++) { hashmap.put(nums[i], i); } for (int i = 0; i &amp;lt; nums.length; i++) { int difference = target - nums[i]; if(hashmap.</description>
    </item>
    
    <item>
      <title>121. Best Time to Buy and Sell Stock</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/BestTimeToBuyAndSellStock.html</link>
      <pubDate>Thu, 03 Aug 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/BestTimeToBuyAndSellStock.html</guid>
      <description>解題思路 要如何算出最大收益？ 買的價格越低，賣的價格越高。
但因為買的時間一定要比賣的時間早，所以只能由左至右開始搜尋（index 從 0 開始）
一開始也只能知道一開始的收益以及目前的金額
假如給定的價格列表為[7,1,5,3,6,4]
一開始的收益為 profit = 0
一開始的金額是 prices [0]
如果是第一天買股票，第二天賣
這時候的收益會是 1 - 7 = - 6
再往後計算的話
如果是第一天買，第三天賣
這時候的收益會是 5 - 7 = - 2
看起來比第一天買第二天賣還要賺（虧比較少）
但這時發現了一件事，第二天的價格比第一天還要低， 這樣根本不用再去管第一天的價格是多少，因為用第二天的價格 (1) 當買入價來繼續計算， 算出來的收益一定會比用第一天的價格 (7) 當買入價還要划算。 而且時間不能重來。
因此可以在計算價差時，發現最低價的時候就更新最低價的值， 計算價差的時候就只要用後續的價格 - 最低價即可得到最大收益。
依照範例給的數據會得到以下結果：
Profit = price[index] - min 1 - 7 = -6 Min = 1 1 - 1 = 0, min = 1 5 - 1 = 4, min = 1, profit = 0 3 - 1 = 2, min = 1, profit = 2 6 - 1 = 5, min = 1, profit = 6 6 - 1 = 6, min = 1, profit = 5 Profit = 5, at 1 and 6 程式碼 class Solution { public int maxProfit(int[] prices) { int len = prices.</description>
    </item>
    
    <item>
      <title>169. Majority Element</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/MajorityElement.html</link>
      <pubDate>Sun, 06 Aug 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/MajorityElement.html</guid>
      <description>Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3] Output: 3 Example 2:
Input: nums = [2,2,1,1,1,2,2] Output: 2 思路: 用 hashmap 統計每個直出現的次數，最後再找出最大的值
class Solution { public int majorityElement(int[] nums) { HashMap&amp;lt;Integer, Integer&amp;gt; hashmap = new HashMap&amp;lt;&amp;gt;(); int len = nums.</description>
    </item>
    
    <item>
      <title>57. Insert Interval</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/InsertInterval.html</link>
      <pubDate>Mon, 07 Aug 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/InsertInterval.html</guid>
      <description>You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.
Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).</description>
    </item>
    
    <item>
      <title>217. Contains Duplicate</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/Contains-Duplicate.html</link>
      <pubDate>Sun, 06 Aug 2023 09:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/Contains-Duplicate.html</guid>
      <description>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1:
Input: nums = [1,2,3,1] Output: true Example 2:
Input: nums = [1,2,3,4] Output: false Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true 解題思路 一樣用hash map 統計有無重複出現的
class Solution { public boolean containsDuplicate(int[] nums) { HashMap&amp;lt;Integer, Integer&amp;gt; hashmap = new HashMap&amp;lt;&amp;gt;(); int len = nums.</description>
    </item>
    
    <item>
      <title>15. Three Sum</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/ThreeSum.html</link>
      <pubDate>Tue, 08 Aug 2023 08:25:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/ThreeSum.html</guid>
      <description>Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
Example 1:
Input: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.</description>
    </item>
    
  </channel>
</rss>
