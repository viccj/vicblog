<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Log of Vic</title>
    <link>https://lazyvic.com/tags/Algorithm.html</link>
    <description>Recent content in Algorithm on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Aug 2023 08:00:41 +0800</lastBuildDate><atom:link href="https://lazyvic.com/tags/Algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Selection Sort</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/SelectionSort.html</link>
      <pubDate>Tue, 22 Aug 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/SelectionSort.html</guid>
      <description>Template for sort classes Selection sort: Java implementation Mathematical analysis Reference In iteration i, find index min of smallest reamining entry. Swap a[i] and a[min] Template for sort classes public class Example { public static void sort(Comparable[] a) { /* sort algorithms need to implement */ } private static boolean less(Comparable v, Comparable w) { return v.compareTo(w) &amp;lt; 0; } private in compsreTo(Comparable v, Comparable w) { if(v &amp;gt; w) { return 1; } if(v &amp;lt; w) { return -1; } return 0; } private static void exch(Comparable[] a, int i, int j) { Comparable swap = a[i]; a[i] = j; a[j] = swap; } public static boolean isSorted(Comparable[] a) { // Test whether the array entries are in order.</description>
    </item>
    
    <item>
      <title>Stacks</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/Stacks.html</link>
      <pubDate>Sun, 20 Aug 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/Stacks.html</guid>
      <description>Stack Api Linked-list implementation Array implementation Stack considerations Overflow and underflow. Null items Loitering 參考來源 Stack Api Warmup API. Stack of string data type.
這裡會建立如下的Stack API
public clacc StackOfStrings StackOfStrings() // create am empyt stack void push(String item) // insert a new strig onto stack String pop() //remove and return the string most recently added booleam isEmpty() // is the stack empty? int size() // number of strings on the stack Linked-list implementation 將最新的 item 加到 Linked-list 的最前端，移除的時候也是從第一個開始移除</description>
    </item>
    
    <item>
      <title>Resizing Arrays</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/ResizingArrays.html</link>
      <pubDate>Sun, 20 Aug 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/ResizingArrays.html</guid>
      <description>Resizing-array implementation Problem First try Too expensive Another way How to shrink array First try Effectient solution resizing array vs. linked list Linked-list Resizing array 參考來源 Resizing-array implementation Problem 如何增加或減少 array 的 size?
First try push() : increase size of array s[] by 1 pop() : decrease size of array s[] by 1 Too expensive 每次新增都要複製舊的 array 到全新的 array push N 個 item 的時間複雜度 是1 + 2+&amp;hellip;+N ~ N²/2 Another way If array is full, create a new array of twice the size, and copy items.</description>
    </item>
    
    <item>
      <title>Quick Find</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickFind.html</link>
      <pubDate>Mon, 26 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickFind.html</guid>
      <description>Quick Find Structure 初始資料結構 Find Connected. Union. Implemetion Too slow Cost model Quick-find defect: Union too expensive 參考來源 Quick Find Structure 初始資料結構 名為 id[] 且數量為 N 的陣列
id[p] 是物件 p 所屬於的 component id
以上圖為例，id[6] = 0
Find p 的 id 為？
Connected. p 跟 q 是否有相同的 id？
ex: id[6] = 0, id[7] =1, 6 跟7 並沒有connect
Union. 要將包含 p 跟 q 的兩個components 合併，找出所有id 為 id[p] 的物件， 將其 id 修改成 id[q].</description>
    </item>
    
    <item>
      <title>Queues</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/Queues.html</link>
      <pubDate>Mon, 21 Aug 2023 07:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/Queues.html</guid>
      <description>Queue Api Linked-list implementation 參考來源 Queue Api Just like stack api, only name different
public clacc QueueOfStrings QueueOfStrings() // create am empyt queue void enqueue(String item) // insert a new strig onto queue String dequeue() //remove and return the string most recently added booleam isEmpty() // is the queue empty? int size() // number of strings on the queue Linked-list implementation 有兩個指針，分別指向第一個以及最後一個 node
insert 新 item在最後面，remove item在最前面
public class LinkedQueueOfStrings { private Node first, last private class Node { String item; Node next; } public boolean isEmpty() { return first == null; } public void enqueue(String item) { Node oldlast = last; last = new Node(); last.</description>
    </item>
    
    <item>
      <title>Quick Union</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickUnion.html</link>
      <pubDate>Fri, 30 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickUnion.html</guid>
      <description>初始資料結構 Root Find Union Implement Also too slow Cost model Quick-find defect Quick-union defect 參考來源 因為 Quick-find 演算法中，Union 的效率太低，因此要改善Union，在這章節稱為Quick Union （lazy approach），為什麼要叫Lazy approach呢？因為能躺著就不要做著，能坐著就不要站著，除非死到臨頭不然不要行動。
初始資料結構 名為 id[] 且數量為 N 的陣列
id[p] 是物件 p 所屬於的component id
上面兩個與 Quick-find 一樣，但這次多了一個新的結構， root
Root 將一整個Array 看成 a set of trees，也就是說每個物件都屬於一個 tree，這個資料結構就是由很多 tree 集合而成。
每個物件，會有一個Parent，如下圖，（3 可以接到4，3的 parent 是 4，4 的 parent 是 9) 順著線一直找，當找不到 parent 時，這時候就稱這點為 root
如果這個物件只有自己，那自己就是root，例如1
Find 因為每個物件都會有一個 root，要找兩個物件是不是同一個 component 的話，只要看他們的 root 是不是一樣就可以</description>
    </item>
    
    <item>
      <title>Weighted Quick Union</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/WeithgedQuickUnion.html</link>
      <pubDate>Sat, 29 Jul 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/WeithgedQuickUnion.html</guid>
      <description>Imporvement 1: weighting Data Structure Find Union Implement Weighted quick-union analysis Running time. Proposition Can we impove it even further? 參考來源 How to imporvements Quick-union?
上一篇中， Quick-Union 演算法中，最後可能因為每個tree長得太高，導致效率變差。
Imporvement 1: weighting 在每次 Union 時，順帶記錄每棵樹的 size (number of objects)
在每次 Union 時，刻意將較小的樹連接到較大的樹下
Data Structure 與 quick-union 一樣，但多追蹤每棵樹的大小 (size of objects for roots)
Find 與 quick-union 一樣
Union 修改為：
將小的樹往大的樹接 更新 sz[] array Implement public class QuickUnionUF { private int[] id; private int[] sz; // size of objects for roots (site indexed) // set id of each object to itself (N array access) public WeightedQuickFindUF(int N) { id = new int[N]; for (int i = 0; i &amp;lt; N; i++) { id[i] = i; } // init sz of every objects sz = new int[N]; for (int i = 0; i &amp;lt; N; i++) { sz[i] = 1; } } public int root(int i) { while (i !</description>
    </item>
    
  </channel>
</rss>
