<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Log of Vic</title>
    <link>https://lazyvic.com/tags/java.html</link>
    <description>Recent content in java on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Jul 2023 15:00:41 +0800</lastBuildDate><atom:link href="https://lazyvic.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decrypt AES-GCM encoded content with JAVA Cipher using PHP OpenSSL</title>
      <link>https://lazyvic.com/Programming/Languages/PHP/Decrypt-AES-GCM-encoded-content-with-JAVA-Cipher-using-PHP-OpenSSL.html</link>
      <pubDate>Wed, 05 Jul 2023 15:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/PHP/Decrypt-AES-GCM-encoded-content-with-JAVA-Cipher-using-PHP-OpenSSL.html</guid>
      <description>Conclusion The Process 參考資料 最近工作遇到一個專案，是要把透過Java使用AES-GCM加密過的資料解密，因為對方也沒有講清楚（或是不熟）導致解密有點不順利，不過後來還是成功解出來了，因此紀錄一下。
In a recent project, I had to decrypt data encrypted using AES-GCM in Java. Despite some initial challenges due to unclear instructions or lack of familiarity, I eventually succeeded in decrypting the data. Here&amp;rsquo;s a brief summary of the process.
Conclusion Java透過AES-GCM加密後的結果會包含兩部分：加密後字串+Tag，要解密時把字串拆開拿到Tag，並且只對加密後字串解密。
when encrypting data using AES-GCM in Java, the resulting ciphertext will consist of two parts: the encrypted string and the tag. When decrypting, it is important to separate the ciphertext and retrieve the tag.</description>
    </item>
    
  </channel>
</rss>
