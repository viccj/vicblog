<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sorts on Log of Vic</title>
    <link>https://lazyvic.com/tags/sorts.html</link>
    <description>Recent content in sorts on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 05 Sep 2023 08:00:41 +0800</lastBuildDate><atom:link href="https://lazyvic.com/tags/sorts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Merge Sort</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week3/MergeSort/MergeSort.html</link>
      <pubDate>Sun, 03 Sep 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week3/MergeSort/MergeSort.html</guid>
      <description>Basic plan Java implementation Reference Basic plan Divide array into two halves. Recursively sort each half. Merge two halves Java implementation private static void mergeSort(int [] a) { int [] aux = new int[a.length]; mergeSortHelper(a, aux, 0, a.length -1); } private static void mergeSortHelper(int [] a, int [] aux, int lo, int hi) { if (hi &amp;lt;= lo) { return; } int mid = lo + (hi - lo) / 2; mergeSortHelper(a, aux, lo, mid); mergeSortHelper(a, aux, mid + 1, hi); merge(a, aux, lo, mid, hi); } private static void merge(int [] a, int [] aux, int lo, int mid, int hi) { // copy for (int i :a) { aux[i] = a[i]; } int i = lo, j = mid + 1; for (int k = lo; k &amp;lt;= hi; k++) { // 如果 i 已經 超過 mid, 代表i 左半邊子樹列已經全部遍歷過一次， // 那麼接下來a[k] 就直接會是右半邊的下一個 item aux[j] if (i &amp;gt; mid) { a[k] = aux[j]; j++; // 如果 j 已經 超過 hi, 代表右半邊子樹列已經全部遍歷過一次， // 那麼接下來a[k] 就直接會是左半邊的下一個 item aux[i] } else if (j &amp;gt; hi) { a[k] = aux[i]; i++; // 比較小的放進a[k]內 } else if(less(aux[j], aux[i])) { a[k] = aux[j]; j++; } else { a[k] = aux[i]; i++; } } } Reference [1] Algorithms in Java, Lecture slide</description>
    </item>
    
    <item>
      <title>Selection Sort</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/SelectionSort.html</link>
      <pubDate>Tue, 22 Aug 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/SelectionSort.html</guid>
      <description>Template for sort classes Selection sort: Java implementation Mathematical analysis Reference In iteration i, find index min of smallest reamining entry. Swap a[i] and a[min] Template for sort classes public class Example { public static void sort(Comparable[] a) { /* sort algorithms need to implement */ } private static boolean less(Comparable v, Comparable w) { return v.compareTo(w) &amp;lt; 0; } private int compareTo(Comparable v, Comparable w) { if(v &amp;gt; w) { return 1; } if(v &amp;lt; w) { return -1; } return 0; } private static void exch(Comparable[] a, int i, int j) { Comparable swap = a[i]; a[i] = j; a[j] = swap; } public static boolean isSorted(Comparable[] a) { // Test whether the array entries are in order.</description>
    </item>
    
    <item>
      <title>Bottom-up Merge Sort</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week3/MergeSort/BottomUpMergeSort.html</link>
      <pubDate>Tue, 05 Sep 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week3/MergeSort/BottomUpMergeSort.html</guid>
      <description>Basic plan Java implementation Reference Basic plan Pass through array, merging subarrays of size 1. Repeat for subarrays of size 2, 4, 8, .. until end of array. no recursion needed Java implementation private static void mergeSort(int [] a) { int [] aux = new int[a.length]; for (int sz = 1; sz &amp;lt; a.lentgh, sz = sz + sz) { for (int lo = 0; lo &amp;lt; N-sz; lo += sz+sz) { merge(a, aux, lo, lo+sz-1, Math.</description>
    </item>
    
    <item>
      <title>Insertion Sort</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/InsertionSort.html</link>
      <pubDate>Sat, 26 Aug 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/InsertionSort.html</guid>
      <description>Algorithm Insertion sort inner loop demo Inner for loop Java implementation Analysis Reference Algorithm In iteration i, swap a[i] with each larger entry to its left
Insertion sort inner loop To maintain algorithm invariants:
move the pointer to the right
i++
Moving from right to left, exchange a[i] with each larger entry to its left.
demo Inner for loop for (int j = i; j &amp;gt; 0 ; j--) { if(less(a[j], a[j-1])) { exch(a, j, j-1); } else { break; } } Java implementation public static void insertionSort(int[] a) { int N = a.</description>
    </item>
    
    <item>
      <title>Shell Sort</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/ShellSort.html</link>
      <pubDate>Sat, 26 Aug 2023 08:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/ElementSorts/ShellSort.html</guid>
      <description>Idea Reference Idea 基本上就是做了很多次 insertion sort，但 insertion sort 是往左邊一個比較，比較的間隔為1，Shell sort 每次會比較 h 個間隔，隨著 h 的遞減，直到h &amp;lt;1為止。
也就是說 insertion sort 就是 h = 1 的 shell sort.
public class Shell { public static void sort(Comparable[] a) { int N = a.length; // 得出初始的h值，這邊是用3N+1，也可以嘗試用不同的算式 int h = 1; while (h &amp;lt; N/3) { h = 3*h + 1; } while (h &amp;gt;= 1) { // 不同的 h 去做的insert sort， 之前的insertion sort的話其實h就是1 for (int i = h; i &amp;lt; N; i++) { for (int j = i; j &amp;gt;= h &amp;amp;&amp;amp; less(a[j], a[j-h]); j -=h) { exch(a, j, j-h); } } // 遞減 h 直到 h &amp;lt; 1為止 h = h/3; } } } Reference [1] Algorithms in Java, Lecture slide</description>
    </item>
    
  </channel>
</rss>
