<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cache on Log of Vic</title>
    <link>https://lazyvic.com/tags/cache.html</link>
    <description>Recent content in cache on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Aug 2023 08:25:41 +0800</lastBuildDate><atom:link href="https://lazyvic.com/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design An Cache</title>
      <link>https://lazyvic.com/Programming/Languages/Miscellaneous/DesignAnCache.html</link>
      <pubDate>Tue, 08 Aug 2023 08:25:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Miscellaneous/DesignAnCache.html</guid>
      <description>class Cache { private $capacity; // Capacity of the cache private $data = []; // Data storage for key-value pairs private $scores = []; // Scores storage for keys public function __construct($capacity) { $this-&amp;gt;capacity = $capacity; // Initialize cache with given capacity } public function get($key) { if (isset($this-&amp;gt;data[$key])) { $this-&amp;gt;updateTimestamp($key); // Update timestamp to reflect recent access return $this-&amp;gt;data[$key][0]; // Return the value associated with the key } return -1; // Return -1 if key is not found } public function put($key, $value, $weight) { if (count($this-&amp;gt;data) &amp;gt;= $this-&amp;gt;capacity) { $this-&amp;gt;evict(); // Perform eviction if cache capacity is reached } $this-&amp;gt;data[$key] = [$value, $weight, time()]; // Store key-value, weight, and timestamp $score = $this-&amp;gt;calculateScore($weight, $this-&amp;gt;data[$key][2]); // Calculate score $this-&amp;gt;updateScore($key, $score); // Update score for the key } private function updateTimestamp($key) { $this-&amp;gt;data[$key][2] = time(); // Update the timestamp for the key } private function evict() { $minKey = array_search(min($this-&amp;gt;scores), $this-&amp;gt;scores); // Find key with the minimum score unset($this-&amp;gt;data[$minKey], $this-&amp;gt;scores[$minKey]); // Remove the key from data and scores } private function updateScore($key, $score) { $this-&amp;gt;scores[$key] = $score; // Update the score for the key } private function calculateScore($weight, $timestamp) { $currentTime = time(); // Get the current time $timeDifference = max(1, $currentTime - $timestamp); // Calculate time difference return $weight / (log($timeDifference) + 1); // Calculate and return the score } } time complexity O(1) for both get and put method</description>
    </item>
    
  </channel>
</rss>
