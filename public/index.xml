<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log of Vic</title>
    <link>https://lazyvic.com/</link>
    <description>Recent content on Log of Vic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://lazyvic.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Two Sum</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/TwoSum.html</link>
      <pubDate>Thu, 03 Aug 2023 13:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/TwoSum.html</guid>
      <description>Two Sum 暴力解 兩個 loop 加起來等於 target, 就回傳他們的 index，應該是最新手最直覺的人（我）都想得出來的解答
優化解 一樣是用兩個 loop 去解，但是這裡不是用 nested loop，而是先用一個 loop 以及 hashmap 把陣列裡的每個值標記起來 [index, value]，另一個 loop 再去對每個值做計算，如果 target - nums[i] 有在 hashmap裏面，就回傳 i 以及對應的 index
class Solution { public int[] twoSum(int[] nums, int target) { Map&amp;lt;Integer, Integer&amp;gt; hashmap = new HashMap&amp;lt;&amp;gt;(); for(int i = 0; i &amp;lt; nums.length; i++) { hashmap.put(nums[i], i); } for (int i = 0; i &amp;lt; nums.length; i++) { int difference = target - nums[i]; if(hashmap.</description>
    </item>
    
    <item>
      <title>Dynamic Connectivity</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/DynamicConnectivity.html</link>
      <pubDate>Sat, 24 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/DynamicConnectivity.html</guid>
      <description>前提 目的 相關應用 連接的定義 演算法實作 Union-find data type (API) 目標：為了union-find 設計一個有效率的資料結構 Union-find implementation[2] 參考來源 前提 Giving N objects
目的 寫出演算法來完成以下兩點
Union command: connect two objects Find/connected query: Is there a path connecting the two objects? 假設給定的物件為 0,1,2,3,4,5,6,7,8,9，在執行完以下的union命令後，
Union(4, 3) Union(3, 8) Union(6, 5) Union(9, 4) Union(2, 1) connected(0, 7) // no connected connected(8, 9) // connected union(5, 0) union(7, 2) connected(0, 7) union(1, 0) // connected connectivity 的狀況會如下圖
相關應用 數位照片的Pixels 在同一個網路的電腦 社群網站的好友 連接的定義 Reflexive: p 跟 p 自己連接 Symmetric: 若p跟q連接，q也跟p連接 Transitive: 若p跟q連接，q跟r連接，則p跟r連接 物件如果連接可以想成他們是在同一個component裏面，因此就剛剛的例子，會有2個component set</description>
    </item>
    
    <item>
      <title>Stacks</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/Stacks.html</link>
      <pubDate>Sat, 24 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/Stacks.html</guid>
      <description>my solution</description>
    </item>
    
    <item>
      <title>Why Hugo</title>
      <link>https://lazyvic.com/Programming/SiteStory/WhyHugo.html</link>
      <pubDate>Wed, 21 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/SiteStory/WhyHugo.html</guid>
      <description>為啥我搞了半天最後決定用 Hugo弄個網站？
錯綜複雜的原因 斷斷續續的筆記習慣 VPS Domain 為了讓Domain的錢花得心安 Hugo 錯綜複雜的原因 會用Hugo架網站完全就是個意外，或許可以說是不同時間點覺得有趣的東西結合起來的結果。
斷斷續續的筆記習慣 在轉職成為軟體工程師前，就有在記錄我最近學了什麼東西的習慣，原本是記在HackMD，但上班後就棄用了， 上班後用的東西就記在Apple Notes上，比較偏各專案得紀錄跟常用的指令。前陣子也有用過一陣子medium寫過幾篇刷題紀錄， 真的是幾篇就四篇吧 (而且都是複製別人的解法用自己的話重講一次，還都是easy)。
VPS 跟Billy大神閒聊的時候知道他最近考過了AWS證照，夢想成為離前端越遠越好的軟體工程師的我很羨慕又欽佩，便在1 on 1的時候與主管聊起這話題，在主管的推薦下建議我可以先玩玩VPS，比起AWS單純也便宜，原理也都差不多，熟悉之後去用AWS會比較快上手因為AWS實在太雜了。
然後我就馬上開了一開VPS起來然後發現我不知道要幹嘛&amp;hellip; 就又關掉了。
Domain 做某專案的時候要請客戶提供Domain讓我們設定，或是我們幫他們弄一組，但我一開始完全不知道這些東西如何去用專業術語溝通，就問了旁邊的同事，發現他熟的跟啥一樣，我跟他比起來大概是全熟的牛排VS旁邊的生菜。
後來知道他有在架NAS，也有買自己的Domain，還親手登入後台設定一遍給我看。聽到他有自己的domain我眼睛都亮起來了，感覺超屌，心想我一定也要一個自己的Domain。
為了讓Domain的錢花得心安 接著好一陣子我每天朝思暮想要買一個domain，也去Godaddy上面瞎晃，不過畢竟 我也不是啥有錢人，買domain一定要物盡其用，只能為了說服我自己買domain而努力找出一個用途來，最好還要對我的職業生涯很有幫助。
最後想著想著突然想到我可以用WordPress弄個blog來寫學習筆記，綁上我的domain！咦～聽起來不錯，便開始利用通勤時研究WordPress怎麼弄。
Hugo WordPress研究了半天，也不時看到其他架靜態blog的工具，發現這東西真是五花八門，馬上就又稍微研究了一下 (真的只有稍微)。
Jekyll：Ruby寫的，沒什麼感覺 Hugo：Go寫的，好像很潮 Hexo：Node.js寫的，直接刪掉 刪掉了Jekyll跟Hexo最後在wordpress跟Hugo選一個，一開始還是有點猶豫不決，最後壓垮我的倒數第二根稻草是看到一篇 Hugo+Github Action 自動部署到 VPS 的文章， 心裡想哇靠這不是把我的三個願望一次完成了嗎？還多點了一滴滴CI/CD。
最後一根稻草是也去看了一下技術名人的網站，看到 良葛格的新網站 也是用Hugo架的，整個簡潔又專業。
因此最後，就決定是Hugo了</description>
    </item>
    
    <item>
      <title>Quick Find</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickFind.html</link>
      <pubDate>Mon, 26 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickFind.html</guid>
      <description>Quick Find Structure 初始資料結構 Find Connected. Union. Implemetion Too slow Cost model Quick-find defect: Union too expensive 參考來源 Quick Find Structure 初始資料結構 名為 id[] 且數量為 N 的陣列
id[p] 是物件 p 所屬於的 component id
以上圖為例，id[6] = 0
Find p 的 id 為？
Connected. p 跟 q 是否有相同的 id？
ex: id[6] = 0, id[7] =1, 6 跟7 並沒有connect
Union. 要將包含 p 跟 q 的兩個components 合併，找出所有id 為 id[p] 的物件， 將其 id 修改成 id[q].</description>
    </item>
    
    <item>
      <title>Resizing Arrays</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/ResizingArrays.html</link>
      <pubDate>Sat, 24 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week2/StackAndQueue/ResizingArrays.html</guid>
      <description>my solution</description>
    </item>
    
    <item>
      <title>121. Best Time to Buy and Sell Stock</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/BestTimeToBuyAndSellStock.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/BestTimeToBuyAndSellStock.html</guid>
      <description>解題思路 要如何算出最大收益？ 買的價格越低，賣的價格越高。
但因為買的時間一定要比賣的時間早，所以只能由左至右開始搜尋（index 從 0 開始）
一開始也只能知道一開始的收益以及目前的金額
假如給定的價格列表為[7,1,5,3,6,4]
一開始的收益為 profit = 0
一開始的金額是 prices [0]
如果是第一天買股票，第二天賣
這時候的收益會是 1 - 7 = - 6
再往後計算的話
如果是第一天買，第三天賣
這時候的收益會是 5 - 7 = - 2
看起來比第一天買第二天賣還要賺（虧比較少）
但這時發現了一件事，第二天的價格比第一天還要低， 這樣根本不用再去管第一天的價格是多少，因為用第二天的價格 (1) 當買入價來繼續計算， 算出來的收益一定會比用第一天的價格 (7) 當買入價還要划算。 而且時間不能重來。
因此可以在計算價差時，發現最低價的時候就更新最低價的值， 計算價差的時候就只要用後續的價格 - 最低價即可得到最大收益。
依照範例給的數據會得到以下結果：
Profit = price[index] - min 1 - 7 = -6 Min = 1 1 - 1 = 0, min = 1 5 - 1 = 4, min = 1, profit = 0 3 - 1 = 2, min = 1, profit = 2 6 - 1 = 5, min = 1, profit = 6 6 - 1 = 6, min = 1, profit = 5 Profit = 5, at 1 and 6 程式碼 class Solution { public int maxProfit(int[] prices) { int len = prices.</description>
    </item>
    
    <item>
      <title>Hugo GitHub Page</title>
      <link>https://lazyvic.com/Programming/SiteStory/GettingStart.html</link>
      <pubDate>Sun, 18 Jun 2023 14:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/SiteStory/GettingStart.html</guid>
      <description>離安裝好Hugo並胡搞瞎搞也過了大概一週，用我僅存的記憶記錄一下，前面都是湊字數的，重點是最後一段哈哈
安裝Hugo 主題安裝 Github Page 抓不到css 安裝Hugo 因為我是Mac，所以直接用 brew intstall hugo安裝。
安裝好之後就可以用 hugo new site blog-test來建立新的網站。
主題安裝 安裝好Hugo之後，下一步就是挑選主題，我是使用 geekdoc 這個主題，主要是看到他的example site覺得很簡單，剛好我也不想花太多時間在把我的頁面弄的很fancy
安裝的方法是直接下載他們的release bundle
// 在themes的folder下面建立hugo-geekdoc的folder mkdir -p themes/hugo-geekdoc/ // 下載 curl -L https://github.com/thegeeklab/hugo-geekdoc/releases/latest/download/hugo-geekdoc.tar.gz | tar -xz -C themes/hugo-geekdoc/ --strip-components=1 安裝好之後再到Hugo的設定檔中把主題設定上去
theme = &amp;#34;hugo-geekdoc&amp;#34; 然後啟動Hugo就可以看到預設的頁面了
hugo server -D 雖然hugo server會自動重build頁面，但是我發現有時候更改檔案內容或是資料夾結構，會無法正確顯示，這時候還是手動重啟hugo server比較穩。 編輯一下就可以用
hugo 生成靜態內容，會建立一個public的資料夾將你剛剛的文件都放進去。
然後就可以把他推到github的repository拉
Github Page 抓不到css 其實前面的步驟網路上都一堆教學，唯一我遇到的問題就是部署到github page後，發現
我的css一直跑掉，打開開發工具看一下發現抓不到我的css跟js等檔案。
在stackoverflow上找了半天，發現是相對路徑的問題，最後在config.toml檔案上加上
relativeURLs= true 就解決了。</description>
    </item>
    
    <item>
      <title>Quick Union</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickUnion.html</link>
      <pubDate>Fri, 30 Jun 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/QuickUnion.html</guid>
      <description>初始資料結構 Root Find Union Implement Also too slow Cost model Quick-find defect Quick-union defect 參考來源 因為 Quick-find 演算法中，Union 的效率太低，因此要改善Union，在這章節稱為Quick Union （lazy approach），為什麼要叫Lazy approach呢？因為能躺著就不要做著，能坐著就不要站著，除非死到臨頭不然不要行動。
初始資料結構 名為 id[] 且數量為 N 的陣列
id[p] 是物件 p 所屬於的component id
上面兩個與 Quick-find 一樣，但這次多了一個新的結構， root
Root 將一整個Array 看成 a set of trees，也就是說每個物件都屬於一個 tree，這個資料結構就是由很多 tree 集合而成。
每個物件，會有一個Parent，如下圖，（3 可以接到4，3的 parent 是 4，4 的 parent 是 9) 順著線一直找，當找不到 parent 時，這時候就稱這點為 root
如果這個物件只有自己，那自己就是root，例如1
Find 因為每個物件都會有一個 root，要找兩個物件是不是同一個 component 的話，只要看他們的 root 是不是一樣就可以</description>
    </item>
    
    <item>
      <title>169. Majority Element</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Array/MajorityElement.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Array/MajorityElement.html</guid>
      <description>Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3] Output: 3 Example 2:
Input: nums = [2,2,1,1,1,2,2] Output: 2 思路: 用 hashmap 統計每個直出現的次數，最後再找出最大的值
class Solution { public int majorityElement(int[] nums) { HashMap&amp;lt;Integer, Integer&amp;gt; hashmap = new HashMap&amp;lt;&amp;gt;(); int len = nums.</description>
    </item>
    
    <item>
      <title>GitHub Action w/ VPS</title>
      <link>https://lazyvic.com/Programming/SiteStory/GitHubActionWithVPS.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/SiteStory/GitHubActionWithVPS.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Install SSL</title>
      <link>https://lazyvic.com/Programming/SiteStory/SSL.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/SiteStory/SSL.html</guid>
      <description>Domain 是在 namecheap 買的，設定好A紀錄跟CNAME之後就可以用了，再來就是申請SSL憑證 糊裡糊塗就把SSL弄好了，隨手記錄一下印象比較深刻的步驟跟坑。
領取SSL憑證 收到憑證後 nginx設定 nginx -t 通過但是一直重啟不了nginx 領取SSL憑證 生成私鑰： openssl genrsa -out private.key 2048 生成一個2048位的RSA私鑰，並將其保存在名為 private.key 的文件中。
接著用剛剛的私鑰生成CSR（證書簽署請求）
openssl req -new -key private.key -out csr.csr 會要求提供與SSL證書相關的信息，例如域名、組織名稱、所在地等。請根據提示輸入正確的信息。
Common Name (CN)：這邊要填你的域名 domain.com，它後面本來寫說填個名字就好我就傻傻的填我的英文名字，結果一直失敗..
生成的CSR文件 csr.csr 就可以整個複製上去。 收到憑證後 通常在取得 SSL 憑證時，您會收到兩個檔案：.crt 憑證檔案和 .ca-bundle（或 .bundle）憑證束檔案。
.crt 憑證檔案是您的 SSL 證書，它包含您的網站的公開金鑰以及其他相關的證書資訊。
.ca-bundle（或 .bundle）憑證束檔案是根憑證和中繼憑證的集合。它包含了憑證鏈中的所有憑證，用於驗證您的 SSL 憑證的合法性。憑證鏈包括根憑證（Root Certificate）和中繼憑證（Intermediate Certificate）。根憑證是由受信任的憑證授權中心（Certificate Authority）簽署的，而中繼憑證是由根憑證簽署的其他憑證。
在設定 Nginx 的 SSL 時，需要將 .crt 憑證檔案和 .ca-bundle（或 .bundle）憑證束檔案合併為一個檔案，形成完整的憑證鏈。
順序不能錯，要先crt再ca-bundle
cat domain.crt domain.ca-bundle &amp;gt; server.crt nginx設定 # HTTP 重定向到 HTTPS server { listen 80; server_name lazyvic.</description>
    </item>
    
    <item>
      <title>Weighted Quick Union</title>
      <link>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/WeithgedQuickUnion.html</link>
      <pubDate>Sat, 29 Jul 2023 10:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Algs4Princeton/Week1/UnionFind/WeithgedQuickUnion.html</guid>
      <description>Imporvement 1: weighting Data Structure Find Union Implement Weighted quick-union analysis Running time. Proposition Can we impove it even further? 參考來源 How to imporvements Quick-union?
上一篇中， Quick-Union 演算法中，最後可能因為每個tree長得太高，導致效率變差。
Imporvement 1: weighting 在每次 Union 時，順帶記錄每棵樹的 size (number of objects)
在每次 Union 時，刻意將較小的樹連接到較大的樹下
Data Structure 與 quick-union 一樣，但多追蹤每棵樹的大小 (size of objects for roots)
Find 與 quick-union 一樣
Union 修改為：
將小的樹往大的樹接 更新 sz[] array Implement public class QuickUnionUF { private int[] id; private int[] sz; // size of objects for roots (site indexed) // set id of each object to itself (N array access) public WeightedQuickFindUF(int N) { id = new int[N]; for (int i = 0; i &amp;lt; N; i++) { id[i] = i; } // init sz of every objects sz = new int[N]; for (int i = 0; i &amp;lt; N; i++) { sz[i] = 1; } } public int root(int i) { while (i !</description>
    </item>
    
    <item>
      <title>Typora &#43; Upic</title>
      <link>https://lazyvic.com/Programming/SiteStory/TyporaUpic.html</link>
      <pubDate>Thu, 22 Jun 2023 17:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/SiteStory/TyporaUpic.html</guid>
      <description>Hugo是用MarkDown來編輯文件的，這時候有個好用的MarkDown 編輯器就很好用，最後我是選擇用Typroa來編輯文件，再貼到Hugo發布，會選擇Typora的原因是因為Typora支援自動上傳圖片並產生連結功能，非常適合Lazy的我。 簡單記錄一下如何用uPic自動上傳圖片到我的GitHub
GitHub開一個新的Repo並產生token uPic 安裝uPic 配置 Typora設定 GitHub開一個新的Repo並產生token 在GitHub首頁-&amp;gt;setting-&amp;gt;Developer Setting-&amp;gt; Personal Ascess Token裡面產生一組新的Token。
我是選classic的token，因為看到另一個還在beta。
可以只勾public_repo，剩下我都沒勾，Note隨便打就好。
uPic 安裝uPic brew install bigwig-club/brew/upic --cask 配置 安裝好之後打開uPic，是Mac的話會在最上面那一條出現，一開始沒注意到還一直想說怎麼打不開&amp;hellip;
進入設定頁面
Owner -&amp;gt; 你的github帳號 Repo -&amp;gt; 你的repo Token-&amp;gt; GitHub token 然後可以按下驗證聽說會有成功畫面出現，但我按了都沒反應就是了。最後是去Typora那邊測試可不可以成功
設定好後再把uPic預設上傳方式改成GitHub即可
Typora設定 照著設定按一下test Uploader顯示成功，之後圖片拖進來就會自動寫好Markdown嚕。</description>
    </item>
    
    <item>
      <title>Level 1.3.1</title>
      <link>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Getting-started-with-Spring/test/two-sum.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Getting-started-with-Spring/test/two-sum.html</guid>
      <description>Level 1.3.1</description>
    </item>
    
    <item>
      <title>Basic Setting</title>
      <link>https://lazyvic.com/Programming/Languages/PHP/PhpUnit/BasicSetting.html</link>
      <pubDate>Sat, 29 Jul 2023 15:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/PHP/PhpUnit/BasicSetting.html</guid>
      <description>PHPUnit 安裝 建立設定檔 phpunit.xml 一次執行所有test phpunit.xml 常用參數 The bootstrap Attribute The cacheDirectory Attribute The cacheResult Attribute The colors Attribute PHPUnit 安裝 composer require --dev phpunit/phpunit 安裝完之後就可以執行測試
php vendor/bin/phpunit yourTest.php 建立設定檔 phpunit.xml 一次執行所有test 建立一個 phpunit.xml檔案，並在裡面指定路徑，之後這個folder裡面所有的測試就會被執行
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;phpunit bootstrap=&amp;#34;bootstrap.php&amp;#34; colors=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;testsuites&amp;gt; &amp;lt;testsuite name=&amp;#34;All Tests&amp;#34;&amp;gt; &amp;lt;directory&amp;gt;tests&amp;lt;/directory&amp;gt; &amp;lt;/testsuite&amp;gt; &amp;lt;/testsuites&amp;gt; &amp;lt;/phpunit&amp;gt; 之後這個 folder 裡面所有的測試就會被執行 (測試的檔名要是Test 結尾，測試的method 要是 test 開頭)
appTest.php
&amp;lt;?php class appTest extends TestCase { public function testSomething() { assertTrue(true); } } php vendor/bin/phpunit phpunit.</description>
    </item>
    
    <item>
      <title>Decrypt AES-GCM encoded content with JAVA Cipher using PHP OpenSSL</title>
      <link>https://lazyvic.com/Programming/Languages/Miscellaneous/cipher/Decrypt-AES-GCM-encoded-content-with-JAVA-Cipher-using-PHP-OpenSSL.html</link>
      <pubDate>Wed, 05 Jul 2023 15:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Miscellaneous/cipher/Decrypt-AES-GCM-encoded-content-with-JAVA-Cipher-using-PHP-OpenSSL.html</guid>
      <description>Conclusion The Process 參考資料 最近工作遇到一個專案，是要把透過Java使用AES-GCM加密過的資料解密，因為對方也沒有講清楚（或是不熟）導致解密有點不順利，不過後來還是成功解出來了，因此紀錄一下。
In a recent project, I had to decrypt data encrypted using AES-GCM in Java. Despite some initial challenges due to unclear instructions or lack of familiarity, I eventually succeeded in decrypting the data. Here&amp;rsquo;s a brief summary of the process.
Conclusion Java透過AES-GCM加密後的結果會包含兩部分：加密後字串+Tag，要解密時把字串拆開拿到Tag，並且只對加密後字串解密。
when encrypting data using AES-GCM in Java, the resulting ciphertext will consist of two parts: the encrypted string and the tag. When decrypting, it is important to separate the ciphertext and retrieve the tag.</description>
    </item>
    
    <item>
      <title>Integrate Spring 1</title>
      <link>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Integrated-Spring/Integrate-Spirng-1.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Integrated-Spring/Integrate-Spirng-1.html</guid>
      <description>My same tree solution</description>
    </item>
    
    <item>
      <title>Integrate Spring 2</title>
      <link>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Integrated-Spring/same-tree.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Integrated-Spring/same-tree.html</guid>
      <description>my solution</description>
    </item>
    
    <item>
      <title>Maximum Depth of Binary Tree</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Tree/MaximumDepthOfBinaryTree.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Tree/MaximumDepthOfBinaryTree.html</guid>
      <description>My same tree solution</description>
    </item>
    
    <item>
      <title>Maximum Depth of Binary Tree</title>
      <link>https://lazyvic.com/Programming/Algorithm/Grind75/Tree/SameTree.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Algorithm/Grind75/Tree/SameTree.html</guid>
      <description>my solution</description>
    </item>
    
    <item>
      <title>Spring 2</title>
      <link>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Getting-started-with-Spring/two-sum.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Getting-started-with-Spring/two-sum.html</guid>
      <description>asdf My two sum solution</description>
    </item>
    
    <item>
      <title>Start</title>
      <link>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Getting-started-with-Spring/Start.html</link>
      <pubDate>Sun, 18 Jun 2023 22:00:41 +0800</pubDate>
      
      <guid>https://lazyvic.com/Programming/Languages/Java/Spring-Boot/Getting-started-with-Spring/Start.html</guid>
      <description>my solution</description>
    </item>
    
  </channel>
</rss>
